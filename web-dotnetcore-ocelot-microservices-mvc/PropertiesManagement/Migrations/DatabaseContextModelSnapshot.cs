// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PropertiesManagement.Database;

#nullable disable

namespace PropertiesManagement.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("PropertiesManagement.Database.Properties", b =>
                {
                    b.Property<Guid>("PropertyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Address")
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime(6)");

                    b.Property<float?>("DepostiAmount")
                        .HasColumnType("float");

                    b.Property<bool?>("IsIDVerified")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Latitude")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("LeaseExpirationDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Longitude")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("char(36)");

                    b.Property<int?>("PayDay")
                        .HasColumnType("int");

                    b.Property<float?>("RentAmount")
                        .HasColumnType("float");

                    b.Property<string>("State")
                        .HasColumnType("longtext");

                    b.Property<int?>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("longtext");

                    b.Property<int?>("Type")
                        .HasColumnType("int");

                    b.Property<int?>("Units")
                        .HasColumnType("int");

                    b.Property<string>("Zip")
                        .HasColumnType("longtext");

                    b.HasKey("PropertyId");

                    b.ToTable("Properties");

                    b.HasData(
                        new
                        {
                            PropertyId = new Guid("de785645-a122-568b-7b1b-ba5882943579"),
                            Address = "OLD 11 Dummy Street Dummy",
                            City = "Dummy City",
                            CreateAt = new DateTime(2023, 3, 27, 14, 35, 10, 801, DateTimeKind.Local).AddTicks(6285),
                            DepostiAmount = 0f,
                            IsIDVerified = true,
                            LeaseExpirationDate = new DateTime(2023, 3, 27, 14, 35, 10, 801, DateTimeKind.Local).AddTicks(6302),
                            OwnerId = new Guid("08db29d3-40d0-4898-858a-b279d3144b82"),
                            PayDay = 5,
                            RentAmount = 0f,
                            State = "Dummy State",
                            Status = 0,
                            Type = 0,
                            Zip = "12345"
                        },
                        new
                        {
                            PropertyId = new Guid("bc126543-a122-568b-7b1b-ba5882943098"),
                            Address = "OLD 12 Dummy Street Dummy",
                            City = "Dummy City",
                            CreateAt = new DateTime(2023, 3, 27, 14, 35, 10, 801, DateTimeKind.Local).AddTicks(6307),
                            DepostiAmount = 0f,
                            IsIDVerified = true,
                            LeaseExpirationDate = new DateTime(2023, 3, 27, 14, 35, 10, 801, DateTimeKind.Local).AddTicks(6308),
                            OwnerId = new Guid("08db29d3-40d0-4898-858a-b279d3144b82"),
                            PayDay = 5,
                            RentAmount = 0f,
                            State = "Dummy State",
                            Status = 0,
                            Type = 0,
                            Zip = "12345"
                        },
                        new
                        {
                            PropertyId = new Guid("cb987678-a122-568b-7b1b-ba5882943890"),
                            Address = "OLD 13 Dummy Street Dummy",
                            City = "Dummy City",
                            CreateAt = new DateTime(2023, 3, 27, 14, 35, 10, 801, DateTimeKind.Local).AddTicks(6311),
                            DepostiAmount = 0f,
                            IsIDVerified = true,
                            LeaseExpirationDate = new DateTime(2023, 3, 27, 14, 35, 10, 801, DateTimeKind.Local).AddTicks(6312),
                            OwnerId = new Guid("08db29d3-b5b0-40f0-8ba1-e71ac088f927"),
                            PayDay = 5,
                            RentAmount = 0f,
                            State = "Dummy State",
                            Status = 0,
                            Type = 0,
                            Zip = "12345"
                        },
                        new
                        {
                            PropertyId = new Guid("08db29d5-2abd-421c-877c-1c976144321b"),
                            Address = "OLD 14 Dummy Street Dummy",
                            City = "Dummy City",
                            CreateAt = new DateTime(2023, 3, 27, 14, 35, 10, 801, DateTimeKind.Local).AddTicks(6315),
                            DepostiAmount = 0f,
                            IsIDVerified = true,
                            LeaseExpirationDate = new DateTime(2023, 3, 27, 14, 35, 10, 801, DateTimeKind.Local).AddTicks(6316),
                            OwnerId = new Guid("08db29d3-b5b0-40f0-8ba1-e71ac088f927"),
                            PayDay = 5,
                            RentAmount = 0f,
                            State = "Dummy State",
                            Status = 0,
                            Type = 0,
                            Zip = "12345"
                        });
                });

            modelBuilder.Entity("PropertiesManagement.Database.PropertyDocuments", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("DocumentURL")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("DocumentId");

                    b.ToTable("PropertyDocuments");
                });

            modelBuilder.Entity("PropertiesManagement.Database.RentStatus", b =>
                {
                    b.Property<Guid>("RentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<float>("Amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("PaidOn")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PaymentMode")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("char(36)");

                    b.HasKey("RentId");

                    b.ToTable("RentStatus");
                });

            modelBuilder.Entity("PropertiesManagement.Database.TenantPropAssoc", b =>
                {
                    b.Property<Guid>("TenantPropAssocId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<Guid>("PropertyId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("TenantPropAssocId");

                    b.ToTable("TenantPropAssocs");
                });
#pragma warning restore 612, 618
        }
    }
}
